/**
 * @fileoverview Firestore Security Rules for Conecta IA application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-related data (profiles, sessions, messages) and allows public read access for knowledge sources.
 * Administrative roles are stored separately and checked for elevated privileges.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /users/{userId}/sessions/{sessionId}: Stores user sessions, accessible only by the user themselves.
 * - /users/{userId}/sessions/{sessionId}/messages/{messageId}: Stores messages within a session, accessible only by the user themselves.
 * - /knowledgeSources/{knowledgeSourceId}: Stores knowledge sources, publicly readable, but only modifiable by admins (currently not implemented).
 * - /roles_admin/{userId}: Stores admin roles for users. Accessible only for reads by the assigned user.
 *
 * Key Security Decisions:
 * - User data (profiles, sessions, messages) is strictly owned by the user.
 * - Knowledge sources are publicly readable to encourage contribution and collaboration.  Write access is open for authenticated users in this prototype but should be restricted to admins in production.
 * - Listing of users is not allowed.
 * - The rules explicitly deny all operations that are not explicitly allowed.
 *
 * Denormalization for Authorization:
 *  - The `roles_admin/{userId}` collection stores the `isAdmin` boolean, avoiding the need for complex queries to determine admin status.
 *
 * Structural Segregation:
 *  - Public knowledge sources are stored in a top-level collection separate from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile with userId: 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile for userId: 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Secure access to user sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) - User with UID 'user123' can create a session under their profile.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own session.
     * @deny (create) - User with UID 'user456' cannot create a session under userId: 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the session under userId: 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/sessions/{sessionId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isSignedIn() {
          return request.auth != null;
        }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Secure access to messages within a session.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (create) - User with UID 'user123' can create a message within their session.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own message.
     * @deny (create) - User with UID 'user456' cannot create a message under userId: 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the message under userId: 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isSignedIn() {
          return request.auth != null;
        }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Public read access to knowledge sources, restricted write access to admins (currently all authenticated users).
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (get, list) - Any user can read or list knowledge sources.
     * @allow (create) - Any authenticated user can create a knowledge source.
     * @allow (update, delete) - Any authenticated user can update/delete a knowledge source (TEMPORARY - should be restricted to admins).
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete knowledge sources.
     * @principle Public read, owner-only write (TEMPORARY - write access is open to all authenticated users).
     */
    match /knowledgeSources/{knowledgeSourceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secure access to admin roles. Only the user themselves can read their role.
     * @path /roles_admin/{userId}
     * @allow (get) - User with UID 'user123' can read their own admin role document at /roles_admin/user123.
     * @deny (get) - User with UID 'user456' cannot read the admin role document at /roles_admin/user123.
     * @deny (list, create, update, delete) - No listing, creation, updating, or deletion allowed.
     * @principle Enforces document ownership for reads; no write access.
     */
    match /roles_admin/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
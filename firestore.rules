/**
 * @fileoverview Firestore Security Rules for Conecta IA application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control model, combined with strict user-ownership, to protect user data and restrict access to admin-only functionality.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Each user can only access their own profile.
 * - /users/{userId}/sessions/{sessionId}/messages/{messageId}: Stores messages within user sessions.  Accessible only by the owner of the session.
 * - /knowledgeSources/{knowledgeSourceId}: Stores knowledge sources added to the Gemini AI.  Only accessible to admin users.
 * - /roles_admin/{userId}: Indicates admin privileges. The presence of a document with a matching {userId} grants admin rights.
 *
 * Key Security Decisions:
 * - User data (profiles, sessions, messages) is strictly controlled via user-ownership.  Users can only access their own data.
 * - Knowledge sources can only be created, updated, or deleted by users with admin privileges.
 * - The `list` operation is allowed only for the user-owned `sessions` and `messages` subcollections, but not for `users` or `knowledgeSources`.
 *
 * Denormalization for Authorization:
 * - The `KnowledgeSource` entity does not currently have an `ownerId` field.  If public read with owner-only writes was desired, it would need to be added.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     */
    match /users/{userId} {
      // Verified user can create their own profile if the userId matches their auth.uid
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rules for user sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create, get, update, delete) - A user can only manage their own sessions.
     * @allow (list) - A user can list their own sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow create, get, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for messages within a session.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (create, get, update, delete) - A user can only manage messages within their own sessions.
     * @allow (list) - A user can list messages within their own sessions.
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      allow create, get, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for knowledge sources.
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (create, update, delete) - Only admin users can create, update or delete knowledge sources.
     * @allow (get) - Public read access.
     * @deny (create, update, delete) - Non-admin users cannot modify knowledge sources.
     */
    match /knowledgeSources/{knowledgeSourceId} {
      allow get: if true;
      allow create, update, delete: if isAdmin();
      allow list: if false;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) - Anyone can create their own admin role, the code will check the backend.
     * @allow (get) - Anyone can read the admin role.
     * @deny (update, delete) - Nobody should be able to update or delete admin roles via the rules.
     */
    match /roles_admin/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if true;
      allow update, delete: if false;
      allow list: if false;
    }

    // ---- Helper Functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is an existing owner of the resource.
      * @param {string} userId - The user ID to check against.
      * @return {boolean} True if the user is the owner and resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
        return (isOwner(userId) && exists(resource.data));
    }

    /**
     * @description Checks if the user has admin privileges by checking for a document in the roles_admin collection.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}
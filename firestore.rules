/**
 * @fileoverview Firestore Security Rules for Conecta IA application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control (RBAC) model with strict ownership for user data and administrative privileges for managing knowledge sources.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /users/{userId}/sessions/{sessionId}: Stores user sessions, accessible only by the user themselves.
 * - /users/{userId}/sessions/{sessionId}/messages/{messageId}: Stores messages within a session, accessible only by the user themselves.
 * - /knowledgeSources/{knowledgeSourceId}: Stores knowledge sources added to the Gemini AI, accessible only by admin users.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges to the user.
 *
 * Key Security Decisions:
 * - User-owned data is strictly controlled; only the authenticated user can access their own profile, sessions, and messages.
 * - Knowledge sources can only be created, updated, or deleted by users with admin privileges, ensuring the integrity of the AI's knowledge base.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document in the `/roles_admin/{userId}` collection, avoiding costly `get()` calls in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the requested user ID.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} - True if the user ID matches, false otherwise.
     * @example isOwner('dJss0nJ116XGNmRsrAWpsFjiFJA3')
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if an admin role exists for the authenticated user.
     * @returns {boolean} - True if admin role exists, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Enforces that the user ID in the path matches the user ID in the document data.
     * @param {string} userId - The user ID from the path.
     * @returns {boolean} - True if the user IDs match during creation, and are immutable on update.
     */
    function isDataConsistentOnCreate(userId) {
        return request.resource.data.id == userId;
    }

    /**
     * @description Enforces that the user ID in the path matches the user ID in the existing document data, preventing changes to the owner.
     * @param {string} userId - The user ID from the path.
     * @returns {boolean} - True if the user IDs match.
     */
    function isDataConsistentOnUpdate(userId) {
        return request.resource.data.id == resource.data.id;
    }

    /**
     * @description Checks if the user is signed in and the document exists.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} - True if the user is signed in and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && exists(resource);
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user 'dJss0nJ116XGNmRsrAWpsFjiFJA3' can create their own user document.
     * @allow (get,update,delete) - Authenticated user 'dJss0nJ116XGNmRsrAWpsFjiFJA3' can read, update, or delete their own user document.
     * @deny (create) - Authenticated user 'otherUserId' cannot create a user document with ID 'dJss0nJ116XGNmRsrAWpsFjiFJA3'.
     * @deny (get,update,delete) - Authenticated user 'otherUserId' cannot read, update, or delete user document 'dJss0nJ116XGNmRsrAWpsFjiFJA3'.
     * @principle Enforces document ownership for reads and writes; only the owner can modify their user document.
     */
    match /users/{userId} {
      //  * Access Control Pattern: Ownership
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/sessions/{sessionId} documents.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) - Authenticated user 'dJss0nJ116XGNmRsrAWpsFjiFJA3' can create a session document within their own user document.
     * @allow (get,update,delete) - Authenticated user 'dJss0nJ116XGNmRsrAWpsFjiFJA3' can read, update, or delete a session document within their own user document.
     * @deny (create) - Authenticated user 'otherUserId' cannot create a session document within user document 'dJss0nJ116XGNmRsrAWpsFjiFJA3'.
     * @deny (get,update,delete) - Authenticated user 'otherUserId' cannot read, update, or delete session document within user document 'dJss0nJ116XGNmRsrAWpsFjiFJA3'.
     * @principle Enforces document ownership for writes; only the owner can create, update, or delete session documents within their user document.
     */
    match /users/{userId}/sessions/{sessionId} {
      //  * Access Control Pattern: Ownership
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/sessions/{sessionId}/messages/{messageId} documents.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (create) - Authenticated user 'dJss0nJ116XGNmRsrAWpsFjiFJA3' can create a message document within their own session document.
     * @allow (get,update,delete) - Authenticated user 'dJss0nJ116XGNmRsrAWpsFjiFJA3' can read, update, or delete a message document within their own session document.
     * @deny (create) - Authenticated user 'otherUserId' cannot create a message document within session document 'sessionId' in user document 'dJss0nJ116XGNmRsrAWpsFjiFJA3'.
     * @deny (get,update,delete) - Authenticated user 'otherUserId' cannot read, update, or delete message document within session document 'sessionId' in user document 'dJss0nJ116XGNmRsrAWpsFjiFJA3'.
     * @principle Enforces document ownership for writes; only the owner can create, update, or delete message documents within their session document.
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      //  * Access Control Pattern: Ownership
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for /knowledgeSources/{knowledgeSourceId} documents.
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (create,update,delete) - Only admin users can create, update, or delete knowledge source documents.
     * @deny (create,update,delete) - Non-admin users cannot create, update, or delete knowledge source documents.
     * @principle Restricts write access to admin users to protect the AI's knowledge base.
     */
    match /knowledgeSources/{knowledgeSourceId} {
      //  * Access Control Pattern: Roles
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for /roles_admin/{userId} documents.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin() || request.auth.uid == userId;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if request.auth.uid == userId;
    }
  }
}
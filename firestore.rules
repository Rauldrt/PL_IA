/**
 * @fileoverview Firestore Security Rules for Conecta IA application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles, sessions, and messages,
 * ensuring that users can only access their own data. Knowledge sources are publicly readable
 * but only modifiable by their owners. Admin roles are readable by the assigned user.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/sessions/{sessionId}: User's AI sessions.
 * - /users/{userId}/sessions/{sessionId}/messages/{messageId}: Messages within a session.
 * - /knowledgeSources/{knowledgeSourceId}: Knowledge sources for the AI.
 * - /roles_admin/{userId}: Administrative roles.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user data, sessions, and messages.
 * - Knowledge sources are publicly readable, but create/update/delete is open for prototyping purposes.
 * - Admin roles are readable by the assigned user.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 *  - The `userId` is used in the path for user data, sessions, and messages,
 *    allowing for easy `isOwner(userId)` checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the app settings configuration.
     * @path /config/app-settings
     * @allow (get) Any signed-in user can fetch the app settings.
     * @deny (get) Unauthenticated users cannot fetch the app settings.
     * @principle Allows public read access to the app settings, but write is forbidden.
     */
    match /config/app-settings {
      allow get: if isSignedIn();
      allow list: if false; // Listing this collection is disallowed.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile if the userId matches their auth UID.
     * @allow (get, list) A user can only read their own profile.
     * @allow (update, delete) A user can only update or delete their own profile.
     * @deny (create) A user cannot create a profile with a different userId.
     * @deny (get, list) A user cannot read another user's profile.
     * @deny (update, delete) A user cannot update or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSelfCreation(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) A user can create a session under their own profile.
     * @allow (get, list) A user can only read their own sessions.
     * @allow (update, delete) A user can only update or delete their own sessions.
     * @deny (create) A user cannot create a session under another user's profile.
     * @deny (get, list) A user cannot read another user's sessions.
     * @deny (update, delete) A user cannot update or delete another user's sessions.
     * @principle Enforces document ownership for user sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to messages within a session.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (create) A user can create a message within their own session.
     * @allow (get, list) A user can only read messages within their own session.
     * @allow (update, delete) A user can only update or delete messages within their own session.
     * @deny (create) A user cannot create a message within another user's session.
     * @deny (get, list) A user cannot read messages from another user's session.
     * @deny (update, delete) A user cannot update or delete messages from another user's session.
     * @principle Enforces document ownership for messages.
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to knowledge sources.
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (get, list) Any authenticated user can read knowledge sources.
     * @allow (create, update, delete) ANY authenticated user can create, update, or delete knowledge sources.
     * @principle Allows public read access to knowledge sources.
     */
    match /knowledgeSources/{knowledgeSourceId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to admin roles.
     * @path /roles_admin/{userId}
     * @allow (get) A user can only read their own admin role.
     * @deny (get) A user cannot read another user's admin role.
     * @principle Enforces document ownership for admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isSelfCreation(userId) {
        return request.auth.uid == userId;
    }
  }
}
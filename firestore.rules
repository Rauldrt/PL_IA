/**
 * @fileoverview Firestore Security Rules for Conecta IA application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, user-centric data model. It enforces strict
 * ownership for user-related data (profiles, sessions, messages) and allows
 * authenticated access to publicly available knowledge sources.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/sessions/{sessionId}: Stores individual user sessions.
 * - /users/{userId}/sessions/{sessionId}/messages/{messageId}: Stores messages within a session.
 * - /knowledgeSources/{knowledgeSourceId}: Stores publicly available knowledge sources.
 *
 * Key Security Decisions:
 * - User data (profiles, sessions, messages) is strictly controlled; only the
 *   authenticated user can access their own data.
 * - Knowledge sources are publicly readable but only created by authenticated users.
 * - Listing of users is disallowed for privacy reasons.
 *
 * Denormalization for Authorization:
 *  None: No specific denormalization is required to implement the data model.
 *
 * Structural Segregation:
 *  The application uses separate collections for user-specific private data
 *  (/users/{userId}/...) and public data (/knowledgeSources/{knowledgeSourceId}).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Denies all operations on the root collection to prevent accidental data leaks or modifications.
     * @path /
     * @allow (get, list, create, update, delete): if false
     * @deny (get, list, create, update, delete): Always.
     * @principle Prevents unintended access to the entire database.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create): if request.auth.uid == userId
     * @allow (get, update, delete, list): if isOwner(userId)
     * @deny (get): if false
     * @deny (create): if request.auth.uid != userId
     * @deny (update): if !isExistingOwner(userId)
     * @deny (delete): if !isExistingOwner(userId)
     * @deny (list): if false
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (get, list, create, update, delete): if isOwner(userId)
     * @deny (get): if false
     * @deny (create): if !isOwner(userId)
     * @deny (update): if !isExistingOwner(userId)
     * @deny (delete): if !isExistingOwner(userId)
     * @deny (list): if !isOwner(userId)
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for messages within a session.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (get, list, create, update, delete): if isOwner(userId)
     * @deny (get): if false
     * @deny (create): if !isOwner(userId)
     * @deny (update): if !isExistingOwner(userId)
     * @deny (delete): if !isExistingOwner(userId)
     * @deny (list): if !isOwner(userId)
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for knowledge sources.
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (get, list): if false
     * @deny (create): if !isSignedIn()
     * @deny (update, delete): if true
     * @principle Public read with owner-only writes.
     */
    match /knowledgeSources/{knowledgeSourceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; //Open for admin role

    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}
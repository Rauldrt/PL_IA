/**
 * @fileoverview Firestore Security Rules for Conecta IA application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user data and restricts access to knowledge sources to admin users.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}` and are only accessible by the user themselves.
 * - User sessions are stored under `/users/{userId}/sessions/{sessionId}` and are only accessible by the user themselves.
 * - Messages within a session are stored under `/users/{userId}/sessions/{sessionId}/messages/{messageId}` and are only accessible by the user themselves.
 * - Knowledge sources are stored under `/knowledgeSources/{knowledgeSourceId}` and are only accessible by admin users.
 * - Admin roles are stored under `/roles_admin/{userId}` and indicate admin privileges for a user.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Admin users have full access to knowledge sources.
 * - Listing of users is not allowed.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *  - To avoid `get()` calls, admin status is checked directly in the rules using the `/roles_admin/{userId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user123', email: 'test@example.com', createdAt: '2024-01-01T00:00:00Z' } } }
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their own profile.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User with ID 'user123' cannot create a profile with a different ID 'user456'.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user456', email: 'test@example.com', createdAt: '2024-01-01T00:00:00Z' } } }
     * @deny (get, update, delete) - User with ID 'user123' cannot read, update, or delete the profile of user 'user456'.
     *   Request: { auth: { uid: 'user123' } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) - User with ID 'user123' can create a session under their profile.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123', startTime: '2024-01-01T00:00:00Z' } } }
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their own sessions.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User with ID 'user123' cannot create a session under another user's profile ('user456').
     *   Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user456', startTime: '2024-01-01T00:00:00Z' } } }
     * @deny (get, update, delete) - User with ID 'user123' cannot read, update, or delete sessions of user 'user456'.
     *   Request: { auth: { uid: 'user123' } }
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sessions/{sessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for messages within a session.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (create) - User with ID 'user123' can create messages within their sessions.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { sessionId: 'session123', sender: 'user', content: 'Hello', timestamp: '2024-01-01T00:00:00Z' } } }
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete messages within their own sessions.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User with ID 'user123' cannot create messages within another user's session.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { sessionId: 'session456', sender: 'user', content: 'Hello', timestamp: '2024-01-01T00:00:00Z' } } }
     * @deny (get, update, delete) - User with ID 'user123' cannot read, update, or delete messages from sessions of user 'user456'.
     *   Request: { auth: { uid: 'user123' } }
     * @principle Enforces strict ownership within the nested data structure.
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for knowledge sources. Only accessible by admin users.
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (get, list) - Admin user can read and list knowledge sources.
     *   Request: { auth: { uid: 'admin123' } }
     * @allow (create, update, delete) - Admin user can create, update, and delete knowledge sources.
     *   Request: { auth: { uid: 'admin123' } }
     * @deny (get, list, create, update, delete) - Non-admin user cannot access knowledge sources.
     *   Request: { auth: { uid: 'user123' } }
     * @principle Restricts access to sensitive data to authorized personnel only.
     */
    match /knowledgeSources/{knowledgeSourceId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) - Only the user themselves can create their admin role document. This will be restricted in future iterations.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { isAdmin: true } } }
     * @allow (get) - Any authenticated user can check if a user is an admin.
     *   Request: { auth: { uid: 'anyUser' } }
     * @deny (list, update, delete) - Listing, updating, and deleting admin roles is not allowed.
     *   Request: { auth: { uid: 'admin123' } }
     */
    match /roles_admin/{userId} {
        function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if request.auth != null;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for Conecta IA application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control model, with strict user-ownership for personal data and admin-only access for managing knowledge sources.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/sessions/{sessionId}: Stores session data, accessible only to the user.
 * - /users/{userId}/sessions/{sessionId}/messages/{messageId}: Stores message data, accessible only to the user.
 * - /knowledgeSources/{knowledgeSourceId}: Stores knowledge sources, accessible only to admins.
 * - /roles_admin/{userId}: Presence of a document grants admin rights to the corresponding user.
 *
 * Key Security Decisions:
 * - User data (profiles, sessions, messages) is strictly owned by the user, enforced through the `isOwner(userId)` function.
 * - Knowledge sources can only be created, updated, or deleted by admin users.
 * - Admin privileges are determined by the existence of a document in the `/roles_admin/{userId}` collection.
 * - Listing of user documents is allowed only for the owner.
 *
 * Denormalization for Authorization:
 *  No denormalization needed in this security rule definition.
 *
 * Structural Segregation:
 *  Private user data is stored under the `/users/{userId}` path, ensuring it is not publicly accessible.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the function to check if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines the function to check if the user exists and is the owner of the resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in the /roles_admin/{userId} collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, list, update, delete) - Authenticated user can access their own profile.
     * @deny (create) - User cannot create a profile for another user.
     * @deny (get, list, update, delete) - User cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/sessions/{sessionId} collection.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) - Authenticated user can create a session under their profile.
     * @allow (get, list, update, delete) - Authenticated user can access their own sessions.
     * @deny (create) - User cannot create a session under another user's profile.
     * @deny (get, list, update, delete) - User cannot access another user's sessions.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/sessions/{sessionId}/messages/{messageId} collection.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (create) - Authenticated user can create a message under their session.
     * @allow (get, list, update, delete) - Authenticated user can access their own messages.
     * @deny (create) - User cannot create a message under another user's session.
     * @deny (get, list, update, delete) - User cannot access another user's messages.
     * @principle Enforces data ownership and restricts access to a user's own data.
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /knowledgeSources/{knowledgeSourceId} collection.
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (create, update, delete) - Only admin users can create, update, or delete knowledge sources.
     * @allow (get, list) - Any user can read knowledge sources.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete knowledge sources.
     * @principle Restricts write access to admin users only.
     */
    match /knowledgeSources/{knowledgeSourceId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
       allow get: if isAdmin();
       allow list: if false;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }
  }
}
/**
 * @file Firestore Security Rules for Conecta IA.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data and restricts
 *  knowledge source management to administrators.  It uses path-based authorization and leverages
 *  a dedicated admin role collection for efficient access control. Data validation is relaxed
 *  to facilitate rapid prototyping.
 *
 * @data_structure
 *  - /users/{userId}: Stores user profiles; accessible only by the user themselves.
 *  - /users/{userId}/sessions/{sessionId}: Stores user sessions; accessible only by the user.
 *  - /users/{userId}/sessions/{sessionId}/messages/{messageId}: Stores messages within a session; accessible only by the user.
 *  - /knowledgeSources/{knowledgeSourceId}: Stores knowledge sources; accessible only by admin users.
 *  - /roles_admin/{userId}: Documents in this collection indicate admin privileges; content is irrelevant.
 *
 * @key_security_decisions
 *  - User listing is disallowed to protect privacy.
 *  - Knowledge source management is restricted to admin users only.
 *  - Admin role is verified by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * @denormalization_for_authorization
 *  - The `isAdmin` status from the User document is NOT used in rules. Instead, the existence of a document
 *    in the `/roles_admin/{userId}` collection is used to grant admin privileges. This avoids the need for
 *    `get()` calls on the User document and simplifies rule logic.
 *
 * @structural_segregation
 *  - User-specific data (sessions, messages) is stored under the /users/{userId} path, enabling secure
 *    and efficient access control based on path-based ownership.
 *  - Knowledge sources are stored in a separate top-level collection (/knowledgeSources), allowing
 *    for specific rules to be applied to admin-managed content.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can
     *  read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own profile.
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched userId.
     * @deny (get, update, delete) - Authenticated user attempts to read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for sessions. Only the authenticated user can
     *  read or write sessions under their own profile.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) - Authenticated user creates a session under their own profile.
     * @allow (get, list, update, delete) - Authenticated user reads, lists, updates, or deletes sessions under their own profile.
     * @deny (create) - Authenticated user attempts to create a session under another user's profile.
     * @deny (get, list, update, delete) - Authenticated user attempts to read, list, update, or delete sessions under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for messages. Only the authenticated user can
     *  read or write messages under their own sessions.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (create) - Authenticated user creates a message under their own session.
     * @allow (get, list, update, delete) - Authenticated user reads, lists, updates, or deletes messages under their own session.
     * @deny (create) - Authenticated user attempts to create a message under another user's session.
     * @deny (get, list, update, delete) - Authenticated user attempts to read, list, update, or delete messages under another user's session.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Restricts access to knowledge sources to admin users only.
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (create, get, list, update, delete) - Admin user can manage knowledge sources.
     * @deny (create, get, list, update, delete) - Non-admin user attempts to manage knowledge sources.
     * @principle Restricts access to a privileged role.
     */
    match /knowledgeSources/{knowledgeSourceId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Admin role definition.  The existence of a document here grants admin privileges.
      *  The document's content is irrelevant.
      * @path /roles_admin/{userId}
      * @allow (create) - Any authenticated user can create their own admin role request (subject to review).
      * @allow (get, list) - Any authenticated user can verify the existence of an admin role.
      * @allow (update, delete) - Only an existing admin can modify the admin roles.
      * @principle Role-based access control.
      */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false; // No listing of admin roles for security reasons
        allow create: if isSignedIn() && request.auth.uid == userId;  //isSignedin();  // Any signed in user can request an admin role
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }

  // --- Helper functions ---
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}
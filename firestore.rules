/**
 * @fileoverview Firestore Security Rules for Conecta IA application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data (profiles, sessions, messages).
 * Knowledge sources are publicly readable but writable only by authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /users/{userId}/sessions/{sessionId}: User sessions, accessible only by the user.
 * - /users/{userId}/sessions/{sessionId}/messages/{messageId}: Messages within a session, accessible only by the user.
 * - /knowledgeSources/{knowledgeSourceId}: Knowledge sources, publicly readable, writable by any authenticated user.
 * - /roles_admin/{userId}: Admin roles, only accessible for reads by the assigned user.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Knowledge sources are publicly readable to facilitate open access to information.
 * - Admin roles are readable by the user to check their admin status.
 * - Data validation is relaxed to allow for rapid prototyping, except for ownership checks and relationship integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *     request.auth.uid == 'user123'
     *     request.resource.data.id == 'user123'
     * @allow (get, update, delete) User with ID 'user123' can get, update, or delete their own profile.
     *     request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile with a mismatched ID 'user456'.
     *     request.auth.uid == 'user123'
     *     request.resource.data.id == 'user456'
     * @principle Enforces document ownership for writes, restricting access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Users collection should not be listable

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) User with ID 'user123' can create a session under their profile.
     *     request.auth.uid == 'user123'
     *     request.resource.data.userId == 'user123'
     * @allow (get, list, update, delete) User with ID 'user123' can get, list, update, or delete their own sessions.
     *     request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create a session under another user's profile.
     *     request.auth.uid == 'user123'
     *     request.resource.data.userId == 'user456'
     * @principle Enforces document ownership for writes, restricting access to a user's own data tree, and validating relational integrity.
     */
    match /users/{userId}/sessions/{sessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to messages within a session.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (create) User with ID 'user123' can create a message within their session.
     *     request.auth.uid == 'user123'
     *     get(/databases/$(database)/documents/users/$(request.auth.uid)/sessions/$(request.resource.data.sessionId)).data.userId == 'user123'
     * @allow (get, list, update, delete) User with ID 'user123' can get, list, update, or delete their own messages.
     *     request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create a message within another user's session.
     *     request.auth.uid == 'user123'
     *     get(/databases/$(database)/documents/users/$(request.auth.uid)/sessions/$(request.resource.data.sessionId)).data.userId != 'user123'
     * @principle Enforces document ownership for writes, restricting access to a user's own data tree, and validating relational integrity using get().
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/sessions/$(request.resource.data.sessionId)).data.userId == userId;
      allow update: if isExistingOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/sessions/$(resource.data.sessionId)).data.userId == userId;
      allow delete: if isExistingOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/sessions/$(resource.data.sessionId)).data.userId == userId;
    }

    /**
     * @description Controls access to knowledge sources.
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (get, list) Any authenticated user can read knowledge sources.
     *     request.auth != null
     * @allow (create, update, delete) Any authenticated user can create, update, or delete knowledge sources.
     *     request.auth != null
     * @deny (create, update, delete) Unauthenticated users can not modify knowledge sources.
     *     request.auth == null
     * @principle Allows public read access with authenticated write access.
     */
    match /knowledgeSources/{knowledgeSourceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to admin roles.
     * @path /roles_admin/{userId}
     * @allow (get) User with ID 'user123' can read their own admin role.
     *     request.auth.uid == 'user123'
     * @deny (list, create, update, delete) No one can list, create, update, or delete admin roles through client requests.
     *     request.auth != null
     * @principle Restricts read access to the assigned user only, denying all write access.
     */
    match /roles_admin/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list, create, update, delete: if false;
    }
  }
}
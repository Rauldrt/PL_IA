
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can manage their own profile information.
    match /users/{userId} {
      // A user can create their own profile.
      allow create: if request.auth != null && request.auth.uid == userId;
      // A user can only read, update, or delete their own profile.
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;

      // Users can manage their own chat sessions.
      match /sessions/{sessionId} {
        // A user can create, read, update, or delete their own sessions.
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;

        // Users can manage messages within their own sessions.
        match /messages/{messageId} {
          // A user can create, read, update, or delete messages in their own sessions.
          allow read, write, delete: if request.auth != null && request.auth.uid == userId;
        }
      }
    }

    // Knowledge sources are readable by any authenticated user.
    // Writing is restricted to prevent unauthorized modifications.
    match /knowledgeSources/{knowledgeSourceId} {
      allow read: if request.auth != null;
      // Write operations (create, update, delete) are implicitly denied unless specified.
      // This will be handled by Admin roles later if needed.
      allow write: if get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.isAdmin == true;
    }

    // Admin roles can only be read by the assigned user.
    // Writes should be handled server-side or by other admins, not directly by clients.
    match /roles_admin/{userId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Deny client-side writes to prevent users from making themselves admins.
        allow write: if false;
    }

    // Fiscales information is readable by any authenticated user.
    // Write operations are restricted to admins.
    match /fiscales/{fiscalId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}

/**
 * @fileoverview Firestore Security Rules for Conecta IA application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, granting users access to their own data and restricting administrative functions to authorized admin users.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /users/{userId}/sessions/{sessionId}: User sessions, accessible only by the user themselves.
 * - /users/{userId}/sessions/{sessionId}/messages/{messageId}: Messages within a session, accessible only by the user themselves.
 * - /knowledgeSources/{knowledgeSourceId}: Knowledge sources for the AI, accessible only by admin users.
 * - /roles_admin/{userId}: Indicates admin privileges; its existence grants admin rights.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Admin privileges are granted based on the presence of a document in the `/roles_admin/{userId}` collection.
 * - Data schema validation is relaxed for prototyping, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 *  To determine if a user has admin roles, the security rules will query for the presence of document in the `roles_admin/{userId}` collection, where the `userId` is the authenticated user ID (`request.auth.uid`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document, verifying both ownership and existence.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in the `/roles_admin/{userId}` collection.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own profile (request.auth.uid matches userId).
     * @allow (get, update, delete) If the user is the owner of the profile.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) If the user is creating a session under their own profile.
     * @allow (get, update, delete) If the user is the owner of the parent user profile.
     * @deny (list) Listing sessions is not allowed except by the owner.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for messages within a session.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (create) If the user is creating a message within their own session.
     * @allow (get, update, delete) If the user is the owner of the parent user profile.
     * @deny (list) Listing messages is not allowed except by the owner.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for knowledge sources.
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (create, get, update, delete, list) If the user has admin privileges.
     * @principle Restricts knowledge source management to admin users.
     */
    match /knowledgeSources/{knowledgeSourceId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create, get, update, delete) if the user is an admin.  This allows admins to manage other admins.
     * @allow (list) if the user is an admin. This enables admin to inspect who has admin role.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}
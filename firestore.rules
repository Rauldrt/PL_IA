/**
 * @fileoverview Firestore Security Rules for Conecta IA.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, sessions, and messages.
 * Knowledge sources are publicly readable, but only authenticated users can create, update, or delete them.
 * Admin roles are private and only readable by the assigned user.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/sessions/{sessionId}: Sessions for each user, owned by the user.
 * - /users/{userId}/sessions/{sessionId}/messages/{messageId}: Messages within a session, owned by the user.
 * - /knowledgeSources/{knowledgeSourceId}: Knowledge sources, readable by all, writable by authenticated users.
 * - /roles_admin/{userId}: Admin roles, only readable by the assigned user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Ownership is enforced by matching the `userId` in the path with `request.auth.uid`.
 * - Knowledge sources are publicly readable but writable by authenticated users, NOT publicly writable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with auth UID 'user123' can create a profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with auth UID 'user123' can get, update, and delete their profile at /users/user123.
     * @deny (create) - User with auth UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with auth UID 'user456' cannot get, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) - User with auth UID 'user123' can create a session at /users/user123/sessions/session456 if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with auth UID 'user123' can get, update, and delete their session at /users/user123/sessions/session456.
     * @deny (create) - User with auth UID 'user456' cannot create a session at /users/user123/sessions/session456.
     * @deny (get, update, delete) - User with auth UID 'user456' cannot get, update, or delete the session at /users/user123/sessions/session456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for messages within a session.
     * @path /users/{userId}/sessions/{sessionId}/messages/{messageId}
     * @allow (create) - User with auth UID 'user123' can create a message at /users/user123/sessions/session456/messages/message789 if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with auth UID 'user123' can get, update, and delete their message at /users/user123/sessions/session456/messages/message789.
     * @deny (create) - User with auth UID 'user456' cannot create a message at /users/user123/sessions/session456/messages/message789.
     * @deny (get, update, delete) - User with auth UID 'user456' cannot get, update, or delete the message at /users/user123/sessions/session456/messages/message789.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.sessionId == sessionId;
      allow update: if isExistingOwner(userId) && request.resource.data.sessionId == resource.data.sessionId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for knowledge sources.
     * @path /knowledgeSources/{knowledgeSourceId}
     * @allow (get, list) - Any user (signed in or not) can read knowledge sources.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete knowledge sources.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete knowledge sources.
     */
    match /knowledgeSources/{knowledgeSourceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (get) - Only the assigned user can read their admin role.
     * @deny (get) - Other users cannot read admin roles.
     * @deny (create, update, delete, list) - No one can create, update, delete, or list admin roles through the client.  These are set server-side.
     */
    match /roles_admin/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for global app settings.
     * @path /config/app-settings
     * @allow (get) - Any user (signed in or not) can read app settings.
     * @deny (create, update, delete, list) - No one can create, update, delete, or list app settings through the client. These are set server-side.
     */
    match /config/app-settings {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}